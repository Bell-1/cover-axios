{"version":3,"file":"cover-axios.es.min.js","mappings":"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","sources":["webpack://cover-axios/webpack/bootstrap","webpack://cover-axios/webpack/runtime/define property getters","webpack://cover-axios/webpack/runtime/hasOwnProperty shorthand","webpack://cover-axios/external module \"axios\"","webpack://cover-axios/./src/utils/path.ts","webpack://cover-axios/./src/cover-axios.ts","webpack://cover-axios/./src/utils/api.ts","webpack://cover-axios/./src/index.ts","webpack://cover-axios/./src/version.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"default\"]: () => __WEBPACK_EXTERNAL_MODULE_axios__[\"default\"] });","import { Api } from 'types'\r\n\r\nexport function cleanPath(path: string) {\r\n\treturn path.replace(/\\/\\//g, '/')\r\n}\r\n\r\n// 添加所有 [:param] 参数数据进url 中\r\nexport function addParamToUrl(api: Api, paramsData: string[]) {\r\n\tconst apiData: Api = JSON.parse(JSON.stringify(api))\r\n\tconst { params } = apiData\r\n\r\n\tif (!params || !paramsData) return apiData\r\n\r\n\tif (paramsData.length !== params.length) {\r\n\t\tthrow new Error(`Bad request parameter. Please check it`)\r\n\t}\r\n\r\n\tfor (var k in params) {\r\n\t\tapiData.url = apiData.url.replace(params[k], paramsData[k])\r\n\t}\r\n\r\n\treturn apiData\r\n}\r\n","import { HttpOptions, Api } from '../types'\r\nimport axios from 'axios'\r\nimport { cleanPath, addParamToUrl } from './utils/path'\r\nimport { version } from './version'\r\n\r\nconst headers = ((): Record<string, string> => {\r\n\tconst _h = localStorage.getItem('requestHeadersCache')\r\n\ttry {\r\n\t\treturn _h ? JSON.parse(_h) : {}\r\n\t} catch (error) {\r\n\t\treturn {}\r\n\t}\r\n})()\r\n\r\nconst options = {\r\n\ttimeout: 2500,\r\n\tbaseURL: '/',\r\n}\r\n\r\nconst instance = axios.create() // 初始化\r\nconst interceptors = instance.interceptors\r\nlet beforeRequestFn: (api: Api) => boolean\r\n\r\nexport const setOptions = (opts: Partial<HttpOptions> = {}) => {\r\n\tinstance.defaults.timeout = options.timeout = opts.timeout || 2500\r\n\tinstance.defaults.baseURL = options.baseURL = opts.baseURL || '/'\r\n\treturn options\r\n}\r\n\r\n// 请求前验证\r\nexport const setBeforeRequest = (fn: (api: Api) => boolean) => {\r\n\tbeforeRequestFn = fn\r\n}\r\n\r\n// 获取当前存储的请求头\r\nexport const getHeaders = () => headers\r\n// 设置请求头\r\nexport const setHeaders = (key: string, value: string) => {\r\n\tif (!key || !value) return\r\n\theaders[key] = value\r\n\tlocalStorage.setItem('requestHeadersCache', JSON.stringify(headers))\r\n\treturn headers\r\n}\r\n\r\n// 移除请求头\r\nexport const removeHeaders = (key: string) => {\r\n\tif (!key) return\r\n\tdelete headers[key]\r\n\tlocalStorage.setItem('requestHeadersCache', JSON.stringify(headers))\r\n\treturn headers\r\n}\r\n\r\n/**\r\n * 批量添加接口定义\r\n * @param apiList\r\n */\r\nexport const addApiList = (apiList: Api[]) => {\r\n\tfor (let v of apiList) {\r\n\t\taddApi(v)\r\n\t}\r\n}\r\nexport const apiMap: Record<string, Api> = {}\r\n/**\r\n * 添加单个接口\r\n * @param api\r\n */\r\nexport const addApi = (api: Api) => {\r\n\tapiMap[api.apiName] = api\r\n}\r\n\r\n/**\r\n * 获取api\r\n * @param {String} apiName\r\n */\r\nexport const getApi = (apiName: string) => {\r\n\treturn apiMap[apiName]\r\n}\r\n\r\nexport const request = (apiName = '', data = {}, param = []) => {\r\n\tlet api = getApi(apiName)\r\n\tif (!api) return Promise.reject(new Error(`\"(${apiName}\": The API does not exist`))\r\n\r\n\tconst { url, method } = addParamToUrl(api, param)\r\n\r\n\tconst pass = beforeRequestFn ? beforeRequestFn(api) : true\r\n\r\n\tif (pass === false) return Promise.reject(`Request validation was't passed`)\r\n\r\n\treturn instance.request({\r\n\t\turl: cleanPath(url),\r\n\t\tmethod,\r\n\t\theaders,\r\n\t\tdata,\r\n\t\tparams: api.method && api.method === 'GET' ? data : undefined,\r\n\t})\r\n}\r\n\r\nconst Http = {\r\n\tsetOptions,\r\n\tsetBeforeRequest,\r\n\tsetHeaders,\r\n\tgetHeaders,\r\n\tremoveHeaders,\r\n\tgetApi,\r\n\taddApi,\r\n\taddApiList,\r\n\trequest,\r\n\tinterceptors,\r\n\tversion,\r\n}\r\n\r\nexport default Http\r\n","import CoverAxios, { Method } from '../../types'\r\nimport { cleanPath } from './path'\r\n\r\n/**\r\n * 添加api接口\r\n * @param apiName \t接口名称\r\n * @param url \t\t接口地址\r\n * @param method \t请求方式\r\n * @param meta\t\t可存储任意数据供开发时使用\r\n */\r\nexport function genApi(apiName: string, url: string, method: Method = 'GET', meta: string): CoverAxios.Api {\r\n\tconst api: CoverAxios.Api = {\r\n\t\tapiName,\r\n\t\tmethod,\r\n\t\turl: cleanPath('/' + url),\r\n\t}\r\n\r\n\tconst params = url.match(/:\\w+/g) // 查找URL中的 [:param]\r\n\r\n\tif (params) {\r\n\t\tapi.params = params\r\n\t}\r\n\r\n\tif (meta) {\r\n\t\tapi.meta = meta\r\n\t}\r\n\r\n\treturn api\r\n}\r\n","import CoverAxios from './cover-axios'\r\nexport * from './cover-axios'\r\nexport * from './utils/api'\r\nexport * from './utils/path'\r\n\r\nexport default CoverAxios\r\n","export const version = '0.3.0'"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE_axios__","x","d","cleanPath","path","replace","addParamToUrl","api","paramsData","apiData","JSON","parse","stringify","params","length","Error","k","url","beforeRequestFn","headers","_h","localStorage","getItem","error","options","timeout","baseURL","instance","axios","interceptors","setOptions","opts","defaults","setBeforeRequest","fn","getHeaders","setHeaders","value","setItem","removeHeaders","addApiList","apiList","v","addApi","apiMap","apiName","getApi","request","data","param","Promise","reject","method","pass","undefined","genApi","meta","match","version"],"sourceRoot":""}